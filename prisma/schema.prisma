// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Таблица пользователя
model User {
  id Int @id @default(autoincrement())

  // Фио
  surname    String
  name       String
  patronymic String

  // Роль
  role    Role @relation(fields: [role_id], references: [id])
  role_id Int  @default(2)

  // Пароль
  password            String
  updated_password_at DateTime?

  // Емайл
  email String @unique

  // "Мягкое" удаление
  is_deleted Boolean @default(false)

  // Токен
  refresh_token            String?
  refresh_token_expires_at DateTime?
  jwt_token_version        Int       @default(1)

  // Последнйи вход
  last_login_at DateTime?

  // Время создания
  created_at DateTime @default(now()) @db.Timestamptz(0)
  updated_at DateTime @updatedAt @db.Timestamptz(0)

  UserCategories  UserCategories[]
  Garage          Garage[]
  Notification    Notification[]
  DriverComplaint DriverComplaint[]

  FuelCard                  FuelCard[]
  FuelCardAssignmentHistory FuelCardAssignmentHistory[]
}

// Таблица с ролями
model Role {
  id   Int    @id @default(autoincrement())
  // название роли
  name String

  users User[]
}

// Таблица с категориями управления на транспорт
model DrivingCategory {
  id   Int    @id @default(autoincrement())
  // Название категории
  name String @unique

  UserCategorires UserCategories[]
  Car             Car[]
}

// Таблица для привязки категорий управления водителям
model UserCategories {
  id                  Int @id @default(autoincrement())
  user_id             Int
  driving_category_id Int

  User            User            @relation(fields: [user_id], references: [id])
  DrivingCategory DrivingCategory @relation(fields: [driving_category_id], references: [id])
}

model BrandCar {
  id   Int    @id @default(autoincrement())
  // Название производителя
  name String @unique

  ModelCar ModelCar[]
}

model ModelCar {
  id       Int    @id @default(autoincrement())
  brand_id Int
  name     String @unique

  Car                 Car[]
  BrandCar            BrandCar              @relation(fields: [brand_id], references: [id])
  FuelConsumptionRate FuelConsumptionRate[]
}

model TypeCar {
  id          Int    @id @default(autoincrement())
  name        String @unique
  interval_to Int

  Car                 Car[]
  FuelConsumptionRate FuelConsumptionRate[]
}

// Гараж
model Garage {
  id          Int    @id @default(autoincrement())
  name        String @unique
  head_column Int

  HeadColumn User        @relation(fields: [head_column], references: [id])
  Car        Car[]
  Tire       Tire[]
  Battery    Battery[]
  WheelDisk  Disk[]
  Coolant    Coolant[]
  EngineOil  EngineOil[]
}

model GarageMoveCar {
  id          Int      @id @default(autoincrement())
  car_id      Int
  garage_id   Int
  garage_room Int
  date_move   DateTime @default(now()) @db.Timestamptz(0)

  Car Car @relation(fields: [car_id], references: [id])
}

model BrandBattery {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  deletedAt DateTime?

  ModelBattery ModelBattery[]
}

model ModelBattery {
  id        Int       @id @default(autoincrement())
  brand_id  Int
  name      String    @unique
  deletedAt DateTime?

  BrandBattery BrandBattery @relation(fields: [brand_id], references: [id])
  Battery      Battery[]
}

enum BatteryPolarity {
  DIRECT
  REVERSE
}

model Battery {
  id        Int             @id @default(autoincrement())
  model_id  Int
  polarity  BatteryPolarity
  capacity  Int
  power     Float
  garage_id Int
  status    TireStatus      @default(IN_STOCK)

  Garage          Garage            @relation(fields: [garage_id], references: [id])
  ModelBattery    ModelBattery      @relation(fields: [model_id], references: [id])
  BatteryHistory  BatteryHistory[]
  BatteryWriteOff BatteryWriteOff[]
}

model BatteryWriteOff {
  id          Int      @id @default(autoincrement())
  battery_id  Int // Внешний ключ на аккумулятор
  reason      String // Причина списания
  description String? // Дополнительное описание
  created_at  DateTime @default(now()) @db.Timestamptz(0)

  Battery Battery @relation(fields: [battery_id], references: [id]) // Связь с аккумулятором
}

model BatteryHistory {
  id         Int               @id @default(autoincrement())
  battery_id Int
  car_id     Int
  action     TireBatteryAction
  created_at DateTime          @db.Timestamptz(0)

  Battery Battery @relation(fields: [battery_id], references: [id])
  Car     Car     @relation(fields: [car_id], references: [id])
}

model Service {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  address     String
  phone       String
  description String?

  Car           Car[]
  TOHistory     TOHistory[]
  RepairHistory RepairHistory[]
}

enum TransmissionType {
  MECHANICAL
  AUTOMATIC
  STEPLESS
  ROBOTIC
}

enum DriveType {
  FRONT
  REAR
  ALL
}

// Таблица машины
model Car {
  id                  Int              @id @default(autoincrement())
  model_car_id        Int
  year_of_realise     DateTime         @db.Timestamptz(0)
  type_car_id         Int
  color               String
  horse_power         Float
  kilowatt_hour       Float
  passport_number     String
  fuel_type           FuelType
  engine_capacity     Float
  transmission_type   TransmissionType
  driving_category_id Int
  driveType           DriveType
  mileage             Float
  garage_id           Int?
  photo               String
  service_id          Int?
  vin_body            String           @unique
  vin_engine          String           @unique

  Service         Service?        @relation(fields: [service_id], references: [id])
  Garage          Garage?         @relation(fields: [garage_id], references: [id])
  TypeCar         TypeCar         @relation(fields: [type_car_id], references: [id])
  ModelCar        ModelCar        @relation(fields: [model_car_id], references: [id])
  DrivingCategory DrivingCategory @relation(fields: [driving_category_id], references: [id])

  GarageMoveCar       GarageMoveCar[]
  BatteryHistory      BatteryHistory[]
  FuelCard            FuelCard[]
  TOHistory           TOHistory[]
  RepairHistory       RepairHistory[]
  CarQRCode           CarQRCode[]
  BreakdownPrediction BreakdownPrediction[]
  DriverComplaint     DriverComplaint[]
  InsurancePolicy     InsurancePolicy[]
  CoolantHistory      CoolantHistory[]
  EngineOilHistory    EngineOilHistory[]
  WheelHistory        WheelHistory[]
}

// Норма расхода топлива для модели и типа машины
model FuelConsumptionRate {
  id           Int      @id @default(autoincrement())
  model_car_id Int // Внешний ключ на модель машины
  type_car_id  Int // Внешний ключ на тип машины
  fuel_type    FuelType // Тип топлива
  daily_rate   Float // Дневная норма расхода топлива (в литрах)
  created_at   DateTime @default(now()) @db.Timestamptz(0)
  updated_at   DateTime @updatedAt @db.Timestamptz(0)

  ModelCar ModelCar @relation(fields: [model_car_id], references: [id])
  TypeCar  TypeCar  @relation(fields: [type_car_id], references: [id])

  @@unique([model_car_id, type_car_id, fuel_type]) // Уникальный ключ для комбинации модели, типа и топлива
}

// Топливная карта
model FuelCard {
  id              Int            @id @default(autoincrement())
  car_id          Int // Внешний ключ на машину (обязательный)
  user_id         Int? // Внешний ключ на пользователя (необязательный)
  status          FuelCardStatus @default(ACTIVE) // Статус карты
  last_updated_at DateTime       @default(now()) @db.Timestamptz(0) // Дата последнего обновления баланса

  Car                       Car                         @relation(fields: [car_id], references: [id])
  User                      User?                       @relation(fields: [user_id], references: [id]) // Необязательная связь
  FuelCardFuel              FuelCardFuel[] // Связь с видами топлива
  FuelCardHistory           FuelCardHistory[] // История расходов топлива
  FuelCardAssignmentHistory FuelCardAssignmentHistory[]
}

// Связь топливной карты с видами топлива
model FuelCardFuel {
  id              Int      @id @default(autoincrement())
  fuel_card_id    Int // Внешний ключ на топливную карту
  fuel_type       FuelType // Внешний ключ на тип топлива
  daily_rate      Float // Дневная норма расхода топлива (в литрах)
  current_balance Float // Текущий баланс топлива

  FuelCard FuelCard @relation(fields: [fuel_card_id], references: [id])

  @@unique([fuel_card_id, fuel_type]) // Уникальный ключ для комбинации карты и типа топлива
}

// История расходов топлива
model FuelCardHistory {
  id            Int      @id @default(autoincrement())
  fuel_card_id  Int
  fuel_type     FuelType // Внешний ключ на тип топлива
  date          DateTime @db.Timestamptz(0) // Дата расхода
  used_amount   Float // Количество потраченного топлива
  balance_after Float // Баланс после расхода

  FuelCard FuelCard @relation(fields: [fuel_card_id], references: [id])
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
}

// История привязок водителей к топливным картам
model FuelCardAssignmentHistory {
  id           Int            @id @default(autoincrement())
  fuel_card_id Int // Внешний ключ на топливную карту
  user_id      Int? // Внешний ключ на пользователя (необязательный, если карта отвязана)
  action       FuelCardAction
  created_at   DateTime       @default(now()) @db.Timestamptz(0) // Время создания записи

  FuelCard FuelCard @relation(fields: [fuel_card_id], references: [id])
  User     User?    @relation(fields: [user_id], references: [id]) // Необязательная связь
}

enum FuelCardStatus {
  ACTIVE // Активна
  INACTIVE // Неактивна
  ASSIGNED // Привязана к водителю
}

enum FuelCardAction {
  ASSIGN
  UNASSIGN
}

// Прошлая версия
// model TOHistory {
//   id          Int      @id @default(autoincrement())
//   car_id      Int
//   date        DateTime @db.Timestamptz(0)
//   service_id  Int
//   description String

//   Car     Car     @relation(fields: [car_id], references: [id])
//   Service Service @relation(fields: [service_id], references: [id])
// }

model TOHistory {
  id              Int       @id @default(autoincrement())
  car_id          Int
  scheduled_date  DateTime  @db.Timestamptz(0) // Дата, когда должно быть выполнено ТО
  status          TOStatus  @default(SCHEDULED) // Статус ТО
  reason          String? // Причина отмены (если статус CANCELLED)
  completed_at    DateTime? @db.Timestamptz(0) // Дата завершения ТО
  service_id      Int // Где было выполнено ТО
  description     String // Описание выполненных работ
  engine_oil_used Float? // Использовано моторного масла
  coolant_used    Float? // Использовано тосола
  created_at      DateTime  @default(now()) @db.Timestamptz(0)
  updated_at      DateTime  @updatedAt @db.Timestamptz(0)

  Car     Car     @relation(fields: [car_id], references: [id])
  Service Service @relation(fields: [service_id], references: [id])
}

enum TOStatus {
  SCHEDULED // Запланировано
  IN_PROGRESS // В работе
  COMPLETED // Выполнено
  CANCELLED // Отменено
}

model RepairHistory {
  id          Int      @id @default(autoincrement())
  car_id      Int
  startDate   DateTime @db.Timestamptz(0)
  endDate     DateTime @db.Timestamptz(0)
  description String
  service_id  Int

  Car     Car     @relation(fields: [car_id], references: [id])
  Service Service @relation(fields: [service_id], references: [id])
}

// Таблица для QR-кодов
model CarQRCode {
  id         Int      @id @default(autoincrement())
  car_id     Int
  qr_code    String   @unique
  created_at DateTime @default(now()) @db.Timestamptz(0)

  Car Car @relation(fields: [car_id], references: [id])
}

// Таблица для уведомлений
model Notification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  message    String
  created_at DateTime @default(now()) @db.Timestamptz(0)

  User User @relation(fields: [user_id], references: [id])
}

model BreakdownPrediction {
  id         Int      @id @default(autoincrement())
  car_id     Int
  prediction String // Текстовое описание прогноза
  created_at DateTime @default(now()) @db.Timestamptz(0)

  Car Car @relation(fields: [car_id], references: [id])
}

// Таблица для жалоб водителей
model DriverComplaint {
  id         Int      @id @default(autoincrement())
  car_id     Int
  driver_id  Int
  complaint  String
  created_at DateTime @default(now()) @db.Timestamptz(0)

  Car    Car  @relation(fields: [car_id], references: [id])
  Driver User @relation(fields: [driver_id], references: [id])
}

// Таблица для полисов ОСАГО
model InsurancePolicy {
  id            Int      @id @default(autoincrement())
  car_id        Int
  policy_number String
  start_date    DateTime @db.Timestamptz(0)
  end_date      DateTime @db.Timestamptz(0)

  Car Car @relation(fields: [car_id], references: [id])
}

enum CoolantType {
  ANTIFREEZE // Антифриз
  TOXOL // Тосол
  CONCENTRATE // Концентрат
  OTHER // Другое
}

model BrandCoolant {
  id        Int       @id @default(autoincrement())
  name      String    @unique // Название бренда тосола
  deletedAt DateTime?

  models ModelCoolant[] // Связь с моделями тосола
}

model ModelCoolant {
  id        Int       @id @default(autoincrement())
  brand_id  Int // Внешний ключ на бренд
  name      String    @unique // Название модели тосола
  deletedAt DateTime?

  brand    BrandCoolant @relation(fields: [brand_id], references: [id]) // Связь с брендом
  coolants Coolant[] // Связь с тосолами
}

model Coolant {
  id              Int         @id @default(autoincrement())
  model_id        Int // Внешний ключ на модель тосола
  type            CoolantType // Тип тосола (enum)
  volume          Float // Объем тосола (в литрах)
  expiration_date DateTime? // Срок годности
  freezing_point  Float? // Температура замерзания (в градусах Цельсия)
  boiling_point   Float? // Температура кипения (в градусах Цельсия)
  composition     String? // Состав тосола (например, этиленгликоль, пропиленгликоль)
  garage_id       Int // Внешний ключ на гараж
  created_at      DateTime    @default(now()) @db.Timestamptz(0)
  deletedAt       DateTime?

  Garage          Garage            @relation(fields: [garage_id], references: [id]) // Связь с гаражом
  ModelCoolant    ModelCoolant      @relation(fields: [model_id], references: [id]) // Связь с моделью тосола
  CoolantWriteOff CoolantWriteOff[]
  CoolantHistory  CoolantHistory[]
}

model CoolantHistory {
  id         Int      @id @default(autoincrement())
  coolant_id Int // Внешний ключ на тосол
  car_id     Int // Внешний ключ на автомобиль
  action     String // Действие (например, "замена", "долив")
  created_at DateTime @default(now()) @db.Timestamptz(0)

  Coolant Coolant @relation(fields: [coolant_id], references: [id]) // Связь с тосолом
  Car     Car     @relation(fields: [car_id], references: [id]) // Связь с автомобилем
}

model CoolantWriteOff {
  id          Int      @id @default(autoincrement())
  coolant_id  Int // Внешний ключ на тосол
  reason      String // Причина списания
  description String? // Дополнительное описание
  created_at  DateTime @default(now()) @db.Timestamptz(0)

  Coolant Coolant @relation(fields: [coolant_id], references: [id]) // Связь с тосолом
}

enum EngineOilType {
  FULL_SYNTHETIC // Полностью синтетическое
  SEMI_SYNTHETIC // Полусинтетическое
  MINERAL // Минеральное
  OTHER // Другое
}

model BrandEngineOil {
  id   Int    @id @default(autoincrement())
  name String @unique // Название бренда моторного масла

  models ModelEngineOil[] // Связь с моделями моторного масла
}

model ModelEngineOil {
  id       Int    @id @default(autoincrement())
  brand_id Int // Внешний ключ на бренд
  name     String @unique // Название модели моторного масла

  brand      BrandEngineOil @relation(fields: [brand_id], references: [id]) // Связь с брендом
  engineOils EngineOil[] // Связь с моторным маслом
}

model EngineOil {
  id         Int           @id @default(autoincrement())
  model_id   Int // Внешний ключ на модель моторного масла
  type       EngineOilType // Тип моторного масла (enum)
  volume     Float // Объем моторного масла (в литрах)
  viscosity  String // Вязкость (например, "5W-30")
  lifespan   Int // Срок службы в километрах или месяцах
  garage_id  Int // Внешний ключ на гараж
  created_at DateTime      @default(now()) @db.Timestamptz(0)
  deletedAt  DateTime?

  Garage            Garage              @relation(fields: [garage_id], references: [id]) // Связь с гаражом
  ModelEngineOil    ModelEngineOil      @relation(fields: [model_id], references: [id]) // Связь с моделью моторного масла
  EngineOilWriteOff EngineOilWriteOff[]
  EngineOilHistory  EngineOilHistory[]
}

model EngineOilHistory {
  id            Int      @id @default(autoincrement())
  engine_oil_id Int // Внешний ключ на моторное масло
  car_id        Int // Внешний ключ на автомобиль
  action        String // Действие (например, "замена", "долив")
  created_at    DateTime @default(now()) @db.Timestamptz(0)

  EngineOil EngineOil @relation(fields: [engine_oil_id], references: [id]) // Связь с моторным маслом
  Car       Car       @relation(fields: [car_id], references: [id]) // Связь с автомобилем
}

model EngineOilWriteOff {
  id            Int      @id @default(autoincrement())
  engine_oil_id Int // Внешний ключ на моторное масло
  reason        String // Причина списания
  description   String? // Дополнительное описание
  created_at    DateTime @default(now()) @db.Timestamptz(0)

  EngineOil EngineOil @relation(fields: [engine_oil_id], references: [id]) // Связь с моторным маслом
}

// Шины

// КОЛЁСА
// Бренд шин
model BrandTire {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  deletedAt DateTime?

  ModelTire ModelTire[]
}

// Модель шин
model ModelTire {
  id        Int       @id @default(autoincrement())
  brand_id  Int
  name      String    @unique
  deletedAt DateTime?

  BrandTire BrandTire @relation(fields: [brand_id], references: [id])
  Tire      Tire[]
}

// Шины
model Tire {
  id                Int        @id @default(autoincrement())
  model_id          Int
  size              String
  estimated_mileage Int
  remaining_mileage Int
  garage_id         Int
  serial_number     String     @unique
  status            TireStatus @default(IN_STOCK)
  created_at        DateTime   @default(now()) @db.Timestamptz(0)
  deletedAt         DateTime?

  Garage       Garage         @relation(fields: [garage_id], references: [id])
  ModelTire    ModelTire      @relation(fields: [model_id], references: [id])
  TireWriteOff TireWriteOff[]
  TireOnDisk   TireOnDisk[]
}

model WheelHistory {
  id            Int               @id @default(autoincrement())
  tireOnDisk_id Int
  car_id        Int
  action        TireBatteryAction
  is_spare_tire Boolean           @default(false)
  created_at    DateTime          @db.Timestamptz(0)

  TireOnDisk TireOnDisk @relation(fields: [tireOnDisk_id], references: [id])
  Car        Car        @relation(fields: [car_id], references: [id])
}

model TireWriteOff {
  id          Int      @id @default(autoincrement())
  tire_id     Int
  reason      String // Причина списания
  description String? // Дополнительное описание
  created_at  DateTime @default(now()) @db.Timestamptz(0)

  Tire Tire @relation(fields: [tire_id], references: [id])
}

enum TireStatus {
  IN_USE // В эксплуатации
  IN_STOCK // На складе
  WRITTEN_OFF // Списана
}

// Диски
model BrandDisk {
  id   Int    @id @default(autoincrement())
  name String @unique // Название бренда диска

  models ModelDisk[] // Связь с моделями дисков
}

model ModelDisk {
  id       Int    @id @default(autoincrement())
  brand_id Int // Внешний ключ на бренд
  name     String @unique // Название модели диска

  brand BrandDisk @relation(fields: [brand_id], references: [id]) // Связь с брендом
  disks Disk[] // Связь с дисками
}

model Disk {
  id            Int        @id @default(autoincrement())
  model_id      Int // Внешний ключ на модель диска
  size          String // Размер диска
  material      String // Материал диска
  garage_id     Int // Внешний ключ на гараж
  status        TireStatus @default(IN_STOCK)
  serial_number String     @unique
  created_at    DateTime   @default(now()) @db.Timestamptz(0)
  deletedAt     DateTime?

  Garage         Garage       @relation(fields: [garage_id], references: [id]) // Связь с гаражом
  ModelWheelDisk ModelDisk    @relation(fields: [model_id], references: [id]) // Связь с моделью диска
  TireOnDisk     TireOnDisk[] // Связь с шинами
}

model TireOnDisk {
  id         Int        @id @default(autoincrement())
  tire_id    Int
  disk_id    Int
  is_spare   Boolean    @default(false) //Докатка или нет
  status     TireStatus @default(IN_STOCK)
  created_at DateTime   @default(now()) @db.Timestamptz(0)

  Tire         Tire           @relation(fields: [tire_id], references: [id])
  Disk         Disk           @relation(fields: [disk_id], references: [id])
  WheelHistory WheelHistory[]
}

enum TireBatteryAction {
  INSTALL
  REMOVE
}
